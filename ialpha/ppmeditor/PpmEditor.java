package ialpha.ppmeditor;



/*
 * To change this template, choose Tools | Templates
 * an

            @Override
            public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {
                throw new UnsupportedOperationException("Not supported yet.");
            }
        } open the template in the editor.
 */


/**
 *
 * @author J_Rowland
 */
import java.io.*;//all the IOs have been imported hahaha!!
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import java.awt.image.*;
public class PpmEditor extends javax.swing.JFrame {
    //things I added. This are the varialbes that will hold the data parsed from
    //the guis (textboxes)
    private boolean allOkForReport = false;//this is used to tell the if block that holds report to run, na condition cause this pattern o
    private int  numberOfLines;
    private static int conversionFactor = 6290, flocTankTotVol = 2000, levelBeforeRefil = 10;
    private double generatedFlocPumpRate, option2RunningPumps;//used for knowing running pumps in method two
    public Double surgeTankInletFlowrate, flocPumpRate, noFlocPumpsRunning;
        public Double strokeLength, mlForCali;
          
        private double convertedLitersPerDayForOnePump, miliForOneMin, mLiters, chemicalPpm, convertedTimeToLEquivalent, convertedTimeToLEquivalentDay, surgeTankInletForADay,flowForAllRunningPumpsLpD;
        private double pumpStrokeA, pumpStrokeB, pumpStrokeC,pumpStrokeD,pumpStrokeE;
        private String defaultStatusMsg = "Calibration Settings: Default", statusMsg=defaultStatusMsg;//this variable will hold that but will be changed as the processes specifies
        private String strMlForCali, strNoPumpsRunning, strInjectionRate, strInletFlowrate, strChemicalPpm;
   
        Boolean userStrokeSettingsToBeUsed;//To determine if the user wants to use default or custom settings for pump simulation FOR ONLY OPTION2 in ppm computation
    
    //create stroke value object required to know if we will use default or custom strk values
    ppmutilities.StrokeUserInputManager objSUIM = new ppmutilities.StrokeUserInputManager();

    //setting dates for all    
    java.util.Calendar dateAndTime = java.util.Calendar.getInstance();
    String strDateAndTime = dateAndTime.getTime().toString();
    
    
    ppmutilities.PpmUtilities objPpmUtilities = new ppmutilities.PpmUtilities();
    //object for all the processes that will use the dialog box (example open and save operations)
    OpenAndSaveDialogBox objOpenAndSaveDialogBox = new OpenAndSaveDialogBox();

    java.awt.image.BufferedImage image = null;
    
    
   //create an image file from Toolkit to use and create icons
   // Image image = new Toolkit.getDefaultToolkit().getImage("iAlphaIcon2.png");
    /**
     * Creates new form PpiEditor
     */
    public PpmEditor() {
        initComponents();
        
        //set the icon for the program.... it worked
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("iAlphaIcon2.png")).getImage());
    
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jComboBox11 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jComboBox4 = new javax.swing.JComboBox();
        jComboBox5 = new javax.swing.JComboBox();
        jComboBox6 = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jlbUserNameRpt = new javax.swing.JLabel();
        jlbFlocTankLevRpt = new javax.swing.JLabel();
        jlbNoOfAvailPRpt = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jComboBox8 = new javax.swing.JComboBox();
        jlbServicedPTRpt = new javax.swing.JLabel();
        jComboBox9 = new javax.swing.JComboBox();
        jlbIfYesPSRpt = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField9 = new javax.swing.JTextField();
        jlbFlocPmpsLOLRpt = new javax.swing.JLabel();
        jComboBox12 = new javax.swing.JComboBox();
        jButton14 = new javax.swing.JButton();
        jTextField10 = new javax.swing.JTextField();
        jComboBox10 = new javax.swing.JComboBox();
        jlbDeptRpt = new javax.swing.JLabel();
        jlbShiftRpt = new javax.swing.JLabel();
        jlbMetCloggedPRpt = new javax.swing.JLabel();
        jComboBox13 = new javax.swing.JComboBox();
        jTextField11 = new javax.swing.JTextField();
        jlbIfYesRpt = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jlbPumpsThNdORpt = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel11 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jTextField4 = new javax.swing.JTextField();
        jToolBar1 = new javax.swing.JToolBar();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButton15 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jButton13 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jButton9 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jButton17 = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jButton11 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("iAlpha v0.1: Field Operations Flocculants Calculator: Analyze Pump Performance/Reports");
        setBackground(java.awt.Color.white);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(image);

        jTabbedPane1.setBackground(java.awt.Color.white);
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setOpaque(true);
        //this.add(new javax.swing.JScrollPane(jTabbedPane1), java.awt.BorderLayout.CENTER);

        jPanel9.setBackground(java.awt.Color.white);
        jPanel9.setLayout(null);

        jComboBox11.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Calculate Ppm", "Plan when to refill flocculants", "Create daily floc pump report", "Predetermine floc. pump settings", "View pumps stroke injection rates", "Use Main tab", "Exit iAlpha Ppm+" }));
        jComboBox11.setToolTipText("Quickly select what to do");
        jComboBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox11ActionPerformed(evt);
            }
        });
        jPanel9.add(jComboBox11);
        jComboBox11.setBounds(720, 330, 230, 20);

        jLabel6.setText("Quick Navigator: What will you like to do?");
        jPanel9.add(jLabel6);
        jLabel6.setBounds(720, 310, 210, 14);

        jButton16.setText("Enter");
        jButton16.setToolTipText("click enter to perform what you selected");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton16);
        jButton16.setBounds(870, 360, 79, 23);

        jLabel5.setBackground(java.awt.Color.white);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/iAlpha banner.png"))); // NOI18N
        jLabel5.setMaximumSize(new java.awt.Dimension(800, 700));
        jLabel5.setMinimumSize(new java.awt.Dimension(600, 700));
        jLabel5.setOpaque(true);
        jLabel5.setPreferredSize(new java.awt.Dimension(1000, 700));
        jLabel5.setVerifyInputWhenFocusTarget(false);
        jPanel9.add(jLabel5);
        jLabel5.setBounds(0, 0, 1027, 600);

        jTabbedPane1.addTab("Welcome: Starter Page", jPanel9);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel8.setBackground(java.awt.Color.white);
        jPanel8.setPreferredSize(new java.awt.Dimension(1000, 522));

        jPanel2.setBackground(java.awt.Color.white);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calculate Ppm: Step 1: Enter parameters used for calibration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 51, 255))); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "10", "30", "50", "100" }));
        jComboBox1.setToolTipText("Select calibration volume");
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Calibration volume (ml):");
        jLabel1.setToolTipText("This is the volume used in calculating flowrate from the running pumps. It is mostly in mililiters (example 50ml)");

        jLabel3.setText("Average Floc. pump rate (min/vol):");

        jTextField1.setBackground(new java.awt.Color(204, 204, 255));
        jTextField1.setToolTipText("floc pump rate for entire pumps running");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel7.setText("No. of Floc. pumps confirmed running:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "1", "2", "3", "4", "5" }));
        jComboBox2.setToolTipText("Select number of floc pumps running");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7)
                    .addComponent(jLabel3))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBox1, jComboBox2, jTextField1});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(java.awt.Color.white);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Second Approach (optional): Select current pump stroke settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel1.setEnabled(false);

        jLabel11.setText("Stroke Percent of Pump A (%)");

        jLabel12.setText("Stroke Percent of Pump B (%)");

        jLabel13.setText("Stroke Percent of Pump C (%)");

        jLabel14.setText("Stroke Percent of Pump D (%)");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75", "80", "85", "90", "95", "100" }));
        jComboBox3.setEnabled(false);

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75", "80", "85", "90", "95", "100" }));
        jComboBox4.setEnabled(false);

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75", "80", "85", "90", "95", "100" }));
        jComboBox5.setEnabled(false);

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75", "80", "85", "90", "95", "100" }));
        jComboBox6.setEnabled(false);

        jLabel15.setText("Stroke Percent of Pump E (%)");

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75", "80", "85", "90", "95", "100" }));
        jComboBox7.setEnabled(false);

        jLabel4.setText("Note: Field estimation using calibration pot has higher accuracy");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBox3, jComboBox4, jComboBox5, jComboBox6, jComboBox7});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4))
        );

        jPanel3.setBackground(java.awt.Color.white);
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Quick description of parameters used", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 51, 255))); // NOI18N

        jScrollPane1.setBorder(null);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Calibration Volume:\nThis is the volume used in calculating flowrate from the running pumps. It is mostly in mililiters (example 50ml)\n\nNo. of Floc. Pumps Running:\nThe number of confirmed pumps injecting when the calibration was made (example 1 to maximum number of pumps (5)\n\nAverage Floc. pump rate:\nThis is the rate at which the flocculants pump is injecting. It is the number of minutes the calibration volume is pumped (example 3.5min for 3.3min/50ml)\n\nFlowrate into T1401:\nThis is the inlet flowrate into T1401. It determines the amount of chemical required during injection (example, 4600bbl/hr).\n\nStroke Percent of Pump A-E (%):\nThis is the stroke of the pumps in the field, that determines the rate of injection through that particular pump(example, 90% stroke for pump A, and 70% for pump B).\n\nCalculated Ppm:\nThis is the amount of chemical (in ppm) being injected into the surge tank (T1401). It has a limit of 3-6ppm for EC6029A (example, 5ppm of chemical being injected into T1401).\n\nLiters Injected/Day:\nThis is the amount of chemical in liters injected for a day at a constant rate (for 24hrs). Example, 112 Liters of EC6029A injected in 24 hours.\n\nFloc. Tank (%) Used/Day:\nThis is the percentage of the floc. tank consumed/injected at calculated constant rate (i.e. Liters Injected/Day) for 24 hours. Example, 10% of the floc. tank is reduced after 24 hours of constant injection at a given rate.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(null);
        jTextArea1.setCaretPosition(0);
        jTextArea1.setMargin(new java.awt.Insets(2, 5, 2, 2));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel5.setBackground(java.awt.Color.white);
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Step 2: Calculate the amount of flocculants injecting", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 51, 255))); // NOI18N

        jButton1.setText("Clear All");
        jButton1.setToolTipText("Clear everything on screen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Calculate ppm+");
        jButton2.setToolTipText("Calculate ppm from the inputs made");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 153));
        jPanel6.setPreferredSize(new java.awt.Dimension(900, 36));

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setForeground(new java.awt.Color(255, 102, 0));
        jLabel19.setText("What can be done here: Determine Flocculants Injection rate and Resulting Ppm/Create Daily Injection Analysis Report");
        jLabel19.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(jLabel19)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel19)
                .addContainerGap())
        );

        jPanel7.setBackground(java.awt.Color.white);
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Create a report", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel7.setAutoscrolls(true);

        jlbUserNameRpt.setText("User Name*:");
        jlbUserNameRpt.setEnabled(false);

        jlbFlocTankLevRpt.setText("Floc. Tank Level (%)*");
        jlbFlocTankLevRpt.setEnabled(false);

        jlbNoOfAvailPRpt.setText("No. of Available pumps*:");
        jlbNoOfAvailPRpt.setEnabled(false);

        jTextField7.setBackground(new java.awt.Color(204, 204, 255));
        jTextField7.setEnabled(false);

        jTextField8.setBackground(new java.awt.Color(204, 204, 255));
        jTextField8.setEnabled(false);
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "0", "1", "2", "3", "4", "5", " " }));
        jComboBox8.setEnabled(false);

        jlbServicedPTRpt.setText("Serviced pump today?");
        jlbServicedPTRpt.setEnabled(false);

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "No", "Yes - Strainers/Chk vlvs", "Yes - Strainers only", "Yes - Chk vlvs only", "Yes - Lube oil only", "Yes - Lube/Strainers/Chk vlvs", " " }));
        jComboBox9.setEnabled(false);

        jlbIfYesPSRpt.setText("if yes, pumps Serviced");
        jlbIfYesPSRpt.setEnabled(false);

        jCheckBox1.setBackground(java.awt.Color.white);
        jCheckBox1.setText("Toggle Report Frame");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jTextField9.setBackground(new java.awt.Color(204, 204, 255));
        jTextField9.setEnabled(false);

        jlbFlocPmpsLOLRpt.setText("Floc. pumps lube oil levels*:");
        jlbFlocPmpsLOLRpt.setEnabled(false);

        jComboBox12.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "All pumps ok", "4 pumps ok", "3 pumps ok", "2 pumps ok", "1 pump ok", "All pumps low" }));
        jComboBox12.setEnabled(false);

        jButton14.setText("General Notes");
        jButton14.setToolTipText("Add general notes to your report");
        jButton14.setEnabled(false);

        jTextField10.setBackground(new java.awt.Color(204, 204, 255));
        jTextField10.setEnabled(false);

        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Day", "Night", "Not Applicable" }));
        jComboBox10.setEnabled(false);

        jlbDeptRpt.setText("Department:");
        jlbDeptRpt.setEnabled(false);

        jlbShiftRpt.setText("Shift:");
        jlbShiftRpt.setEnabled(false);

        jlbMetCloggedPRpt.setText("Met clogged pumps today?");
        jlbMetCloggedPRpt.setEnabled(false);

        jComboBox13.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "No - All running", "Yes - 1 time", "Yes - 2 times", "Yes - >2 times", " " }));
        jComboBox13.setEnabled(false);

        jTextField11.setBackground(new java.awt.Color(204, 204, 255));
        jTextField11.setEnabled(false);

        jlbIfYesRpt.setText("If yes what pumps:");
        jlbIfYesRpt.setEnabled(false);

        jTextField12.setBackground(new java.awt.Color(204, 204, 255));
        jTextField12.setEnabled(false);

        jlbPumpsThNdORpt.setText("pumps that need lube oil");
        jlbPumpsThNdORpt.setEnabled(false);

        jButton10.setBackground(java.awt.Color.white);
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/Clipboard.png"))); // NOI18N
        jButton10.setText("Create Report");
        jButton10.setToolTipText("Create comprehensive report");
        jButton10.setEnabled(false);
        jButton10.setFocusable(false);
        jButton10.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlbMetCloggedPRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbDeptRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbShiftRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbFlocTankLevRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbNoOfAvailPRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbIfYesRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbServicedPTRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbIfYesPSRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbFlocPmpsLOLRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbUserNameRpt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jlbPumpsThNdORpt, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox12, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox9, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                                    .addComponent(jComboBox8, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox10, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField10, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField9, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox13, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField11, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(12, 12, 12))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbUserNameRpt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbDeptRpt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbShiftRpt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbFlocTankLevRpt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbNoOfAvailPRpt)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbMetCloggedPRpt)
                    .addComponent(jComboBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbIfYesRpt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbServicedPTRpt)
                    .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbIfYesPSRpt)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbFlocPmpsLOLRpt)
                    .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbPumpsThNdORpt, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBox1)
                .addContainerGap())
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton10, jButton14});

        jPanel4.setBackground(java.awt.Color.white);
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Result and Analysis", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(51, 51, 255))); // NOI18N

        jTextField3.setBackground(new java.awt.Color(255, 255, 153));
        jTextField3.setEditable(false);
        jTextField3.setToolTipText("Chemical injected into the surge tank");

        jTextField5.setBackground(new java.awt.Color(255, 255, 153));
        jTextField5.setEditable(false);
        jTextField5.setToolTipText("Liters/day injected");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel9.setText("Calculated Ppm");
        jLabel9.setToolTipText("This is the calculated chemical injected into the surge tank in ppm");

        jLabel16.setText("Liters Injected/Day");
        jLabel16.setToolTipText("In 24hrs at this rate/Floc. pump settings, this is the volume injected");

        jTextField6.setBackground(new java.awt.Color(255, 255, 153));
        jTextField6.setEditable(false);
        jTextField6.setToolTipText("Floc tank percentage consumed at a constant rate (liters/day)");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jLabel17.setText("Floc. Tank (%) used/Day");
        jLabel17.setToolTipText("This is the percentage drop expected in the Floc. tank in 24hrs at this particular rate/Floc. pump settings");

        jLabel2.setText("Effective Ppm is between 3-6 ppm for EC6029A");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jTextField5)
                            .addComponent(jTextField6)))
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel9)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBackground(java.awt.Color.white);

        jProgressBar1.setVisible(false);//make it invisible at startup
        jProgressBar1.setBackground(java.awt.Color.white);
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setString("Processing");
        jProgressBar1.setStringPainted(true);
        jProgressBar1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jProgressBar1PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTextField2.setBackground(new java.awt.Color(204, 204, 255));
        jTextField2.setToolTipText("flowrate into surge tank in bbl/hr");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Flowrate into surge tank - T1401 (bbl/hr): ");

        jCheckBox2.setText("Click to use second approach for calibration below");
        jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox2MouseClicked(evt);
            }
        });
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox3.setText("Use User/Custom Pump Strk Settings for Simulation?");
        jCheckBox3.setEnabled(false);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox2)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBox3)
                .addContainerGap())
        );

        jTextField4.setBackground(java.awt.Color.white);
        jTextField4.setEditable(false);
        jTextField4.setFont(new java.awt.Font("Verdana", 0, 8)); // NOI18N
        jTextField4.setText(statusMsg);
        jTextField4.setBorder(null);
        jTextField4.setEnabled(false);
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 1002, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jTextField4))
                .addGap(14, 14, 14))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel8);

        jTabbedPane1.addTab("Main: iAlpha Ppm+", jScrollPane2);

        jToolBar1.setBackground(java.awt.Color.white);
        jToolBar1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setMargin(new java.awt.Insets(0, 3, 0, 3));

        jButton4.setBackground(java.awt.Color.white);
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/Copy.png"))); // NOI18N
        jButton4.setText("New Entry");
        jButton4.setToolTipText("Enter new values to compute ppm");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton5.setBackground(java.awt.Color.white);
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/List.png"))); // NOI18N
        jButton5.setText("Last Entry");
        jButton5.setToolTipText("View last input and calculated values");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton12.setBackground(java.awt.Color.white);
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/Save.png"))); // NOI18N
        jButton12.setText("Save Entry");
        jButton12.setToolTipText("Save parameters and result");
        jButton12.setFocusable(false);
        jButton12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton12);

        jSeparator3.setBackground(java.awt.Color.white);
        jSeparator3.setOpaque(true);
        jToolBar1.add(jSeparator3);

        jButton15.setBackground(java.awt.Color.white);
        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/Brush.png"))); // NOI18N
        jButton15.setText("Toggle Report");
        jButton15.setToolTipText("Enable creation of reports");
        jButton15.setFocusable(false);
        jButton15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton15.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton15);

        jButton6.setBackground(java.awt.Color.white);
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/Clipboard.png"))); // NOI18N
        jButton6.setText("Report");
        jButton6.setToolTipText("Create comprehensive report");
        jButton6.setEnabled(false);
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);

        jSeparator4.setBackground(java.awt.Color.white);
        jSeparator4.setOpaque(true);
        jToolBar1.add(jSeparator4);

        jButton13.setBackground(java.awt.Color.white);
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/Calculator.png"))); // NOI18N
        jButton13.setText("Calculate Ppm");
        jButton13.setToolTipText("Calculate Ppm");
        jButton13.setFocusable(false);
        jButton13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton13.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton13);

        jButton8.setBackground(java.awt.Color.white);
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/Application.png"))); // NOI18N
        jButton8.setText("PreSet ppm");
        jButton8.setToolTipText("Predetermine pump settings");
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton8);

        jButton7.setBackground(java.awt.Color.white);
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/Schedule.png"))); // NOI18N
        jButton7.setText("Plan Refil");
        jButton7.setToolTipText("Plan when to refil flocculants tank");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);

        jSeparator5.setBackground(java.awt.Color.white);
        jSeparator5.setOpaque(true);
        jToolBar1.add(jSeparator5);

        jButton9.setBackground(java.awt.Color.white);
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/3d bar chart.png"))); // NOI18N
        jButton9.setText("P. Stroke Data");
        jButton9.setToolTipText("View field data used in establishing computations and results");
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton9);

        jSeparator6.setBackground(java.awt.Color.white);
        jSeparator6.setOpaque(true);
        jToolBar1.add(jSeparator6);

        jButton17.setBackground(java.awt.Color.white);
        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/Toolbox.png"))); // NOI18N
        jButton17.setText("A1403 Maintenance");
        jButton17.setToolTipText("A1403 maintenance");
        jButton17.setFocusable(false);
        jButton17.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton17.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton17);
        jToolBar1.add(jSeparator7);

        jButton11.setBackground(java.awt.Color.white);
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ialpha/images/smallerImagesIcons12/Find.png"))); // NOI18N
        jButton11.setText("Documentations");
        jButton11.setToolTipText("iAlpha documentation");
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton11);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open (any saved Entry/Reports)");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("Save As (All enteries)");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem11);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem5.setText("Close");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setText("Clear All Inputs");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText("Fill in sample data");
        jMenuItem4.setToolTipText("Fill in a default sample data used in calibration");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);
        jMenu2.add(jSeparator1);

        jMenu6.setText("Preferences");

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem9.setText("Pump Stroke Configuration (PSC)");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem9);

        jMenu2.add(jMenu6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Correlate");
        jMenu3.setToolTipText("Set your own pump settings policy - This requires authorization from system administrator");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("Pre-select Pump Stroke configuration");
        jMenuItem2.setToolTipText("Obtain settings for the pumps to achieve a particular ppm");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem7.setText("Pump Stroke Configuration preferences");
        jMenuItem7.setToolTipText("Set User-defined injection rates for all pump strokes. This requires authorization from iAlpha's administrator");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem6.setText("View standard stroke data");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem13.setText("Enter new stroke data");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);
        jMenu3.add(jSeparator2);

        jMenuItem10.setText("Plan Floc. Tank Refill");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem12.setText("Toggle Report Frame (on/off)");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem12);

        jMenuItem23.setText("Generate pre-selected pump performance chart");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem23);

        jMenuBar1.add(jMenu3);

        jMenu7.setText("A1403");

        jMenuItem16.setText("A1403 Overview");
        jMenuItem16.setEnabled(false);
        jMenu7.add(jMenuItem16);

        jMenu8.setText("A1403 Maintenance");

        jMenuItem15.setText("Troubleshooting");
        jMenuItem15.setEnabled(false);
        jMenu8.add(jMenuItem15);

        jMenuItem17.setText("Service Plan");
        jMenuItem17.setEnabled(false);
        jMenu8.add(jMenuItem17);

        jMenuItem18.setText("Lubrication");
        jMenuItem18.setEnabled(false);
        jMenu8.add(jMenuItem18);

        jMenuItem19.setText("Service/Performance history");
        jMenuItem19.setEnabled(false);
        jMenu8.add(jMenuItem19);

        jMenu7.add(jMenu8);

        jMenuItem20.setText("Basic components");
        jMenuItem20.setEnabled(false);
        jMenu7.add(jMenuItem20);

        jMenuItem21.setText("Operator Guides");
        jMenuItem21.setEnabled(false);
        jMenu7.add(jMenuItem21);

        jMenuItem22.setText("Safety");
        jMenuItem22.setEnabled(false);
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem22);

        jMenuBar1.add(jMenu7);

        jMenu4.setText("About");

        jMenuItem8.setText("iAlphaPpm+");
        jMenuItem8.setToolTipText("Learn some important notes about the program");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Help");

        jMenuItem14.setText("Documentation");
        jMenu5.add(jMenuItem14);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1044, Short.MAX_VALUE)
                .addGap(0, 0, 0))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1044, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 611, Short.MAX_VALUE)))
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        javax.swing.JFileChooser fc = new  javax.swing.JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        
            
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            
            String fileNameOrPath = file.getPath();//bros the thing work o, path in the format of a string still does the job. it doesnt have to have a path class, just a string
           
            //This is where a real application would open the file.
            try{
                if (fileNameOrPath.endsWith(".ial")){
             objPpmUtilities.viewAnyInput(fileNameOrPath);
             }
                else {
                javax.swing.JOptionPane.showMessageDialog(null, "Invalid file Selected");
                }
            }
            catch(Exception e){
                javax.swing.JOptionPane.showMessageDialog(null, "Invalid file Selected");
            }
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jComboBox1.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
        jComboBox3.setSelectedIndex(0);
        jComboBox4.setSelectedIndex(0);
        jComboBox5.setSelectedIndex(0);
        jComboBox6.setSelectedIndex(0);
        jComboBox7.setSelectedIndex(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
       //call up the PpmCorelForm here
        PpmCorelForm ppmCorelForm = new PpmCorelForm ();
        ppmCorelForm.pack();
        ppmCorelForm.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        javax.swing.JOptionPane.showMessageDialog(null, "Not available in this version. Will be availalbe in final Version-1.0.0.\r(This is where the user will select either default settings or choose new field calibration data)");
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
       if (jCheckBox2.isSelected()==false){
       jComboBox1.setEnabled(true);
       jComboBox1.setSelectedIndex(3);
       
       jComboBox2.setEnabled(true);
       jComboBox2.setSelectedIndex(5);
       
       jTextField1.setEnabled(true);
       jTextField1.setText("2.5");
       jTextField2.setText("6000");
       
       jCheckBox2.setSelected(false);
       }
       else if (jCheckBox2.isSelected()==true){
       jTextField2.setText("6000");
       jComboBox3.setSelectedItem("70");
       jComboBox4.setSelectedItem("70");
       jComboBox5.setSelectedItem("70");
       jComboBox6.setSelectedItem("70");
       jComboBox7.setSelectedItem("70");
       }
       
       
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        javax.swing.JFileChooser fc = new  javax.swing.JFileChooser();
        int returnVal = fc.showSaveDialog(this);
        
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION){
            //now call the saveAnyFile method from ppmutilities and figure out how to get
            //the name of the file with the file path (which is most important)
            //from the jFileChooser and add as one of the arguments
           String userInputedPathAndName = fc.getSelectedFile().getPath();
           System.out.println(userInputedPathAndName);//it prints it o
           //file to write. This will collect all the onscrean parameters and save
           //to a file using the saveas dialog box
           String whatToSaveOnPurpose = "Date: "+strDateAndTime+"\r\n\r\nOption 1: \r\nCalibration Volume: "+jComboBox1.getSelectedItem().toString()+"\r\nNo. of Floc pumps confirmed running: "+jComboBox1.getSelectedItem().toString()
                   + "\r\nAverage Floc. Pump rate: "+jTextField1.getText()+"\r\nFlowrate into Surge Tank: "+jTextField2.getText()+"\r\n\r\nOption 2: \r\nStroke Percent of Pump A: "+jComboBox3.getSelectedItem().toString()+"\r\n"
                   + "Stroke Percent of Pump B: "+jComboBox4.getSelectedItem().toString()+"\r\nStroke Percent of Pump C: "+jComboBox5.getSelectedItem().toString()+"\r\nStroke Percent of Pump D: "+jComboBox6.getSelectedItem().toString()+"\r\n Stroke Percent of Pump E: "+jComboBox7.getSelectedItem().toString()+"\r\n"
                   + "Calculated Ppm: "+jTextField3.getText()+"\r\nLiters of Injection per Day: "+jTextField5.getText()+"\r\nFloc. Tank Percent Used: "+jTextField6.getText()+"\r\n\r\nReports:\r\nUser Name: "+jTextField7.getText()+"\r\nDepartment: "+jTextField10.getText()+"\r\n"
                   + "Shift: "+jComboBox10.getSelectedItem().toString()+"\r\nFloc. Tank Level(%): "+jTextField8.getText()+"\r\nNo. of Availale pumps:  "+jComboBox8.getSelectedItem().toString()+"\r\nMet clogged pumps today?  "+jComboBox13.getSelectedItem().toString()+"\r\nIf yes what pumps: "+jTextField11.getText()+"\r\nServiced pumps today?: "+jComboBox9.getSelectedItem().toString()+"\r\nIf yes pumps serviced: "+jTextField9.getText()+"\r\n"
                   + "Floc pumps lube oil level: "+jComboBox12.getSelectedItem().toString()+"\r\nPumps that need lube oil: "+jTextField12.getText()+"\r\n";
           
           objPpmUtilities.saveAnyEntryToFile(userInputedPathAndName, whatToSaveOnPurpose);
           

        }
        
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    jMenuItem2ActionPerformed(evt);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
      jButton1ActionPerformed(evt);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    jMenuItem6ActionPerformed(evt);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        AdvSetChngStrokeVariables objAdvSetChngVar = new AdvSetChngStrokeVariables();
        objAdvSetChngVar.pack();
        objAdvSetChngVar.setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        planRefil();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        //this is where i read from a text file using buffered classes
        objPpmUtilities.viewLastInput();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        jButton2ActionPerformed(evt);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        //this button calls all the methods that constitute the report and finally
        //creates the report by calling the create report method in class PpmReport
        
       //first lets do some input validation
       //we make sure ppm has been computed, number of available pumps and floc tank level has been entered
        
        if (jTextField3.getText().isEmpty()){
        //show the user that he/she needs to compute Ppm
            javax.swing.JOptionPane.showMessageDialog(null, "Ppm must be calculated before creating a report");
        }
        else if (jTextField7.getText().isEmpty()){
            javax.swing.JOptionPane.showMessageDialog(null, "Please enter your name.\nAll parameters with asterisks (*) must be filled");
        }
        
        else if (jTextField8.getText().isEmpty()){
        //show the user that he/she needs to compute Ppm
            javax.swing.JOptionPane.showMessageDialog(null, "Please enter a Floc. Tank Level (%).\nAll parameters with asterisks (*) must be filled");
        }
        else if (jComboBox8.getSelectedIndex()==0){
        //show the user that he/she needs to compute Ppm
            javax.swing.JOptionPane.showMessageDialog(null, "Please select the number of available floc pumps.\n(These are the good pumps they might not be running)\nAll parameters with asterisks (*) must be filled");
        }
        else if (jComboBox12.getSelectedIndex()==0){
        //show the user that he/she needs to compute Ppm
            javax.swing.JOptionPane.showMessageDialog(null, "Please select the current lube oil status of all the pumps.\nAll parameters with asterisks (*) must be filled");
        }
        
        //now deal with invalid entries
        //guy, see the exclamation sign at the begining of the condition o, to mean opposite
        else if (!jTextField8.getText().isEmpty()){
        //try to parse it to a double, strings or invalid inputs will fail then warn them
          try{
                double tempUserVal = Double.parseDouble(jTextField8.getText());
                //check if the value is between 0-100%
                if ((tempUserVal < 0)|(tempUserVal > 100)){
                javax.swing.JOptionPane.showMessageDialog(null, "Please enter a valid number in Floc. Tank Level.\nDo not enter a number lower than 0 or greater than 100%.\nDo not enter or add symbols (e.g. %)or alphabets (e.g. A).");
          }
                this.allOkForReport = true;
            }
            catch(Exception e){
                //if it dosent work, do the following
            javax.swing.JOptionPane.showMessageDialog(null, "Please enter a valid number in Floc. Tank Level.\nDo not enter or add symbols (e.g. %)or alphabets (e.g. A).");
            jTextField8.setText("");
            }
        
        }
        if (allOkForReport == true){//since everything is ok now, execute the report - booooyahh!!!
        //lets use system.out.print to check if we are good to go    
        System.out.println("allOkForReport variable is having: "+allOkForReport+"it entered the else block before the instantiation");//yea all correct, it changed the allOkForReport variable to true. goodwork bruv
        //create the object of PpmReport using the complex constructor: u know wa i mean hehehe
        ppmutilities.PpmReport objPpmReport = new ppmutilities.PpmReport(
                
                getUserNameForRpt(), getUserDeptForRpt(), getUserShiftForRpt(), getNoAvailPumpsForRpt(), getFlocPumpsRunningForRpt(), getUserTankInletFlowrateForRpt(),
                    getChemicalPpmForRpt(), getConvertedLitersPerDayForRpt(), getFlocTankPercentForRpt(), getLevelIn12hrsForRpt(), getLevelIn24hrsForRpt(), 
                        getRefilTimeForRpt(getFlocTankPercentForRpt()), getExhaustTimeForRpt(), getNoOfCloggedPumpsForRpt(),getTimeMetCloggedPumpsForRpt(),getPumpsMetCloggedForRpt(),  getFlocPumpLubeLevForRpt(), 
                            getPumpsThatNeedOilForRpt(), getPumpsServicedForRpt(), getGeneralNoteForRpt()
                
                ); 
        //set the progress bar to 100% again
//set parameters for the progress bar
            jProgressBar1.setIndeterminate(false);
            jProgressBar1.setStringPainted(false);
            jProgressBar1.setValue(100);
            jProgressBar1.setIndeterminate(true);
            jProgressBar1.setVisible(false);
            
            
        //now the constructor has everything, he can create the report on his own - :)
        objPpmReport.createReport();
        }//end of the last if statement
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        //act like you clicked the check box to release the guys to produce the report        
        jCheckBox1.doClick();
        
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        jMenuItem11ActionPerformed(evt);

    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
         jMenuItem12ActionPerformed(evt);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        javax.swing.JOptionPane.showMessageDialog(null, "Not available in this version. Will be availalbe in final Version-1.0.0");
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        jMenuItem9ActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
         javax.swing.JOptionPane.showMessageDialog(null, "Not available in this version. Will be availalbe in final Version-1.0.0");
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        javax.swing.JOptionPane.showMessageDialog(null, "iAlpha Ppm+ is an application that is aimed at supporting A1403 - Flocculants Package in BOGT."
                + "\nIt is aimed at providing detailed analysis of flocculants reports and daily operations."
                + "\nWith iAlpha Ppm+ one can:"
                + "\n1. Calculate the volume of chemical in Ppm being injected."
                + "\n2. Predetermine the floc. pumps settings to achieve a desired chemical injection volume (in Ppm)"
                + "\n3. Produce daily reports of servicing and forecasts"
                + "\n4. Plan exhaustion and refill dates"
                + "\n5. Track daily changes in floc pump performance through daily reports"
                + "\n\nAbout:\niAlpha Ppm+ is an application currently managed by BSi Intelligent Systems and developed by BOGT field operations supervisors and BOGT laboratory."
                + "\nVersioning:\nUpdates will be released at intervals to add more functionality when required, or as requested by its users."
                + "\niAlpha Ppm+ 2012"
                + "\nVersion: iAlphaV0.1 - Beta");
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
                javax.swing.JOptionPane.showMessageDialog(null, "Not available in this version. Will be availalbe in final Version-1.0.0");

    }//GEN-LAST:event_jButton17ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        javax.swing.JOptionPane.showMessageDialog(null, "Not available in this version. Will be availalbe in final Version-1.0.0");
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox2MouseClicked
        if (jCheckBox2.isSelected()) {
            jTextField1.setEnabled(false);
            jComboBox1.setEnabled(false);
            jComboBox2.setEnabled(false);
            jComboBox3.setEnabled(true);
            jComboBox4.setEnabled(true);
            jComboBox5.setEnabled(true);
            jComboBox6.setEnabled(true);
            jComboBox7.setEnabled(true);
            //now to enable the checkbox for selecting user stroke of choice
            jCheckBox3.setEnabled(true);

            //set the special parameters for this bar
            //set parameters for the progress bar
            jProgressBar1.setIndeterminate(true);
            jProgressBar1.setStringPainted(true);


            javax.swing.JOptionPane.showMessageDialog(null, "You are now using pump stroke percentage for calibration"
                    + "\nFill in Step 1b below before clicking \"Compute Ppm+");
            statusMsg = "Calibration Settings: Option 2 selected by user";
        } else if (jCheckBox2.isSelected()==false) {
            jTextField1.setEnabled(true);
            jComboBox1.setEnabled(true);
            jComboBox2.setEnabled(true);
            jComboBox3.setEnabled(false);
            jComboBox4.setEnabled(false);
            jComboBox5.setEnabled(false);
            jComboBox6.setEnabled(false);
            jComboBox7.setEnabled(false);
            //now to enable the checkbox for selecting user stroke of choice
            jCheckBox3.setEnabled(false);
            javax.swing.JOptionPane.showMessageDialog(null, "You are now using injection rate for calibration"
                    + "\nFill in \"Average Floc. Pump Rate\" in Step 1 above before clicking\n\"Compute Ppm+");

        }

    }//GEN-LAST:event_jCheckBox2MouseClicked

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jProgressBar1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jProgressBar1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jProgressBar1PropertyChange

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        jButton6ActionPerformed(evt);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        //call the click event of this method


        // TODO add your handling code here:
        if (jCheckBox1.isSelected() == true) {
            //just activate the progress bar
            if (jTextField7.isEnabled()) {
                //set parameters for the progress bar
                jProgressBar1.setIndeterminate(true);
                jProgressBar1.setVisible(true);
            }

            jTextField7.setEnabled(true);
            jTextField8.setEnabled(true);
            jTextField9.setEnabled(true);
            jTextField10.setEnabled(true);
            jTextField11.setEnabled(true);
            jTextField12.setEnabled(true);
            jComboBox8.setEnabled(true);
            jComboBox10.setEnabled(true);
            jComboBox9.setEnabled(true);
            jComboBox12.setEnabled(true);
            jComboBox13.setEnabled(true);
            jButton14.setEnabled(true);
            jButton6.setEnabled(true);
            jButton10.setEnabled(true);

            jCheckBox1.setSelected(true);//make sure it stays selected
            jlbUserNameRpt.setEnabled(true);
            jlbDeptRpt.setEnabled(true);
            jlbShiftRpt.setEnabled(true);
            jlbServicedPTRpt.setEnabled(true);
            jlbPumpsThNdORpt.setEnabled(true);
            jlbNoOfAvailPRpt.setEnabled(true);
            jlbMetCloggedPRpt.setEnabled(true);
            jlbIfYesPSRpt.setEnabled(true);
            jlbIfYesRpt.setEnabled(true);
            jlbFlocTankLevRpt.setEnabled(true);
            jlbFlocPmpsLOLRpt.setEnabled(true);
        } else if (jCheckBox1.isSelected() == false) {

            //set the progress bar to disappear
            if (jTextField7.isEnabled() == false) {
                jProgressBar1.setVisible(false);
            }


            jTextField7.setEnabled(false);
            jTextField8.setEnabled(false);
            jTextField9.setEnabled(false);
            jTextField10.setEnabled(false);
            jTextField11.setEnabled(false);
            jTextField12.setEnabled(false);
            jComboBox10.setEnabled(false);
            jComboBox8.setEnabled(false);
            jComboBox9.setEnabled(false);
            jComboBox12.setEnabled(false);
            jComboBox13.setEnabled(false);
            jButton14.setEnabled(false);
            jButton6.setEnabled(false);
            jButton10.setEnabled(false);
            jCheckBox1.setSelected(false);//ensure it stays false
            jlbUserNameRpt.setEnabled(false);
            jlbDeptRpt.setEnabled(false);
            jlbIfYesPSRpt.setEnabled(false);
            jlbShiftRpt.setEnabled(false);
            jlbServicedPTRpt.setEnabled(false);
            jlbPumpsThNdORpt.setEnabled(false);
            jlbNoOfAvailPRpt.setEnabled(false);
            jlbMetCloggedPRpt.setEnabled(false);
            jlbIfYesRpt.setEnabled(false);
            jlbFlocTankLevRpt.setEnabled(false);
            jlbFlocPmpsLOLRpt.setEnabled(false);

        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        //this is for checking which stroke settings to use, if it is standard
        //or it is user FOR ONLY OPTION 2
        if (jCheckBox3.isSelected()==true){
        userStrokeSettingsToBeUsed = true;
        }
        else{
            userStrokeSettingsToBeUsed = false;
            }
        
        
        // parsing the text from String format to Double format
        //What I did here was to cast the object retrieved from the combo box using the method
        //getSelectedItem() it returns an object - wierd, instead of a string, so 
        //parsDouble() cannot directly parse it to double except you cast to string and
        //then parse the string to double. Note: you cannot even cast to double - isshh
        //to extract a selected option from a combo again

        //Now I compute the PPM
        //check if all required cells are filled
        //am supposed to use or for the if statement to check all the fields and
        //use one jOptionpane to list the ones requiring review

        //I am using to major if statements, one will check if the selection check box
        //is selected to know which approach to use in calculation. This is in step 1 or
        //step 1b. The first and the second frame in the gui respectively.

        //before anything computation check if an alphabet was entered

        if (jCheckBox2.isSelected() == false) {//this is the first major if for option 1 calculation
            if (jTextField1.getText() != null) {

                try {

                    Double.parseDouble(jTextField1.getText());
                    Double.parseDouble(jTextField2.getText());
                    Double.parseDouble((String) jComboBox1.getSelectedItem());
                    Double.parseDouble((String) jComboBox2.getSelectedItem());

                } catch (Exception e) {
                    java.awt.Toolkit.getDefaultToolkit().beep();//it makes a nice sound you should copy this and paste in all your warnings or infos  
                    javax.swing.JOptionPane.showMessageDialog(null, "Please enter a valid number. Empty inputs and alphabets are not valid.");
                    jTextField1.setText("");
                    jTextField2.setText("");
                }
            }

            //checking again and now for the main calculation
            if ((jTextField1.getText().isEmpty())) {
                javax.swing.JOptionPane.showMessageDialog(null, "All required parameters have not been filled, please enter all parameters in Step 1");
            } else {//this is to check if what was entered was an alphabet
                mlForCali = Double.parseDouble((String) jComboBox1.getSelectedItem());
                noFlocPumpsRunning = Double.parseDouble((String) jComboBox2.getSelectedItem());
                flocPumpRate = Double.parseDouble(jTextField1.getText());
                surgeTankInletFlowrate = Double.parseDouble(jTextField2.getText());

                //i imported pmutilities library that holds the utility classes this app needs
                //that is why i can just call PpmCalc which is a class in a different folder

                //am using package.class format to create objects because these class files are not in the default package
                //they are in different folders/packages
                ppmutilities.PpmCalc objPpmCalc = new ppmutilities.PpmCalc();
                convertedLitersPerDayForOnePump = objPpmCalc.convertMlPerMinToLPerDay(mlForCali, flocPumpRate);
                flowForAllRunningPumpsLpD = objPpmCalc.computeFlowForAllRunningPumps(convertedLitersPerDayForOnePump, noFlocPumpsRunning);
                surgeTankInletForADay = objPpmCalc.computeSurgeTankInletForADay(surgeTankInletFlowrate);
                chemicalPpm = objPpmCalc.computePpm(flowForAllRunningPumpsLpD, conversionFactor, surgeTankInletForADay);

                //Now display the result in the textfield
                //convert the double to string to print in the result textbox
                jTextField3.setText(String.valueOf(chemicalPpm));
                jTextField5.setText(String.valueOf(flowForAllRunningPumpsLpD));
                statusMsg = Double.toString(chemicalPpm);//show it in the status bar
                jTextField4.setText("Calculated Ppm (Option 1): " + statusMsg);
                jTextField6.setText(String.valueOf((getConvertedLitersPerDay() / flocTankTotVol) * 100));


                //now save the results and settings to a file if the checkBox is selected
                objPpmUtilities.saveLastEntryToFile(mlForCali, noFlocPumpsRunning, flocPumpRate, surgeTankInletForADay, chemicalPpm);//this is so that the last entry can be recalled
            } //this is the end of option 1 ppm calculation, i.e. the first if 
        } else {//this is the begining of the second Major condition, i.e. option 2
            //this is where you code when the jCheckbox is not selected
            System.out.println("option 2 selected by user"); //it showed
            jComboBox2.setEnabled(false);
            jTextField1.setEnabled(false);

            //start a new validation here
            if (jCheckBox2.isSelected() == true) {//this will always result to a true
                try {
                    Double.parseDouble(jTextField2.getText());
                    System.out.println("attempted the try statement successfully"); //it showed  
                    statusMsg = "attempted the try statement successfully";//will overwrite the default status message
                    jTextField4.setText(statusMsg);
                } catch (Exception e) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Please enter a valid number. Empty inputs and alphabets are not valid.");
                    jTextField2.setText("");
                    statusMsg = "Some errors were found, DO NOT enter non-zero or blank parameters";//show it in the status bar
                    jTextField4.setText(statusMsg);
                }
            }


            System.out.println("I reach too o"); //it showed  
            //  mlForCali = Double.parseDouble((String)jComboBox1.getSelectedItem()); i dont need this in option 2
            System.out.println("mlForCali " + mlForCali);
            jTextField4.setText("miliLiters used for calibration: " + statusMsg);


            noFlocPumpsRunning = getNoOfPumps();//just used for display, not needed for final pump rate because this method sums all the injection rates of all the selected running pumps so there is no need to multiply again


            System.out.println("noFlocPumpsRunning " + noFlocPumpsRunning);
            statusMsg = Double.toString(noFlocPumpsRunning);//show it in the status bar
            jTextField4.setText("No. of running pumps: " + statusMsg);


            flocPumpRate = generateFlocPumpRateFromCombo();//this method automatically gets the total of all running pumps so no need to multiply with the number of running pumps
            //check if the program brought back a 0
            if (flocPumpRate == 0) {
                System.out.println("the flocPumpRate generated zero infact it outputted: " + flocPumpRate);
                javax.swing.JOptionPane.showMessageDialog(null, "Select the strokes");
            } else {


                System.out.println("flocPumpRate " + flocPumpRate);
                statusMsg = Double.toString(flocPumpRate);//show it in the status bar
                jTextField4.setText("Calculated floc. pump rate: " + statusMsg);
            }

            surgeTankInletFlowrate = Double.parseDouble(jTextField2.getText());
            System.out.println("surgeTankInletFlowrate " + surgeTankInletFlowrate);
            statusMsg = Double.toString(surgeTankInletFlowrate);//show it in the status bar
            jTextField4.setText("Surge tank flowrate: " + statusMsg);

            ppmutilities.PpmCalc objPpmCalc = new ppmutilities.PpmCalc();
            flowForAllRunningPumpsLpD = flocPumpRate * 1.44;
            surgeTankInletForADay = objPpmCalc.computeSurgeTankInletForADay(surgeTankInletFlowrate);
            chemicalPpm = objPpmCalc.computePpm(flowForAllRunningPumpsLpD, conversionFactor, surgeTankInletForADay);

            //Now display the result in the textfield
            //convert the double to string to print in the result textbox
            jTextField3.setText(String.valueOf(chemicalPpm));




            jTextField5.setText(String.valueOf(flowForAllRunningPumpsLpD));
            jTextField6.setText(String.valueOf((getConvertedLitersPerDay() / flocTankTotVol) * 100));
            statusMsg = Double.toString(chemicalPpm);//show it in the status bar
            jTextField4.setText("Calculated Ppm (Option 2): " + statusMsg);



        }//this is the end of the entire calculation else process
        //set parameters for the progress bar
        jProgressBar1.setIndeterminate(false);
        jProgressBar1.setStringPainted(false);
        jProgressBar1.setValue(100);
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jComboBox1.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
        jComboBox3.setSelectedIndex(0);
        jComboBox4.setSelectedIndex(0);
        jComboBox5.setSelectedIndex(0);
        jComboBox6.setSelectedIndex(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped

   }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost

   }//GEN-LAST:event_jTextField1FocusLost

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if (jComboBox1.getSelectedIndex() > 0) {
            //set parameters for the progress bar
            jProgressBar1.setStringPainted(true);
            jProgressBar1.setIndeterminate(true);
            jProgressBar1.setVisible(true);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
//options from the welcome screen to select from
        String select = "Select";
        String calcPpm = "Calculate Ppm";
        String planRefil = "Plan when to refill flocculants";
        String createReports = "Create daily floc pump report";
        String presetPpm = "Predetermine floc. pump settings";
        String viewSettings = "View pumps stroke injection rates";
        String useMainTab = "Use Main tab";
        String exit = "Exit iAlpha Ppm+";

        if (jComboBox11.getSelectedItem().toString() == calcPpm) {
            jTabbedPane1.setSelectedIndex(1);

        } else if (jComboBox11.getSelectedItem().toString() == planRefil) {
            jTabbedPane1.setSelectedIndex(1);

        } else if (jComboBox11.getSelectedItem().toString() == createReports) {
            jTabbedPane1.setSelectedIndex(1);
            jMenuItem12ActionPerformed(evt);

        } else if (jComboBox11.getSelectedItem().toString() == presetPpm) {
            jTabbedPane1.setSelectedIndex(1);
            jMenuItem2ActionPerformed(evt);
        } else if (jComboBox11.getSelectedItem().toString() == viewSettings) {
            jTabbedPane1.setSelectedIndex(1);
            jMenuItem6ActionPerformed(evt);

        } else if (jComboBox11.getSelectedItem().toString() == useMainTab) {
            jTabbedPane1.setSelectedIndex(1);
        } else if (jComboBox11.getSelectedItem().toString() == exit) {
            System.exit(0);
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jComboBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox11ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
       //create an object and set the default user stroke data 
        new ppmutilities.StrokeUserInputManager().setDefaultUserStrokeData();
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(/*I changed what was here and entered this. it changed the look and feel*/javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PpmEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PpmEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PpmEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PpmEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */                
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
             public void run() {
                
               new PpmEditor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox10;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JComboBox jComboBox12;
    private javax.swing.JComboBox jComboBox13;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JComboBox jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel jlbDeptRpt;
    private javax.swing.JLabel jlbFlocPmpsLOLRpt;
    private javax.swing.JLabel jlbFlocTankLevRpt;
    private javax.swing.JLabel jlbIfYesPSRpt;
    private javax.swing.JLabel jlbIfYesRpt;
    private javax.swing.JLabel jlbMetCloggedPRpt;
    private javax.swing.JLabel jlbNoOfAvailPRpt;
    private javax.swing.JLabel jlbPumpsThNdORpt;
    private javax.swing.JLabel jlbServicedPTRpt;
    private javax.swing.JLabel jlbShiftRpt;
    private javax.swing.JLabel jlbUserNameRpt;
    // End of variables declaration//GEN-END:variables

    //This is the method that generates the flocPumpRate from the jComboBoxes the user entered
    public double generateFlocPumpRateFromCombo(){
        //create the object of PpmCorelCalc to draw the stroke variables from there
        ppmutilities.PpmCalc objPpmCalc = new  ppmutilities.PpmCalc();
        
        
        //use if statements to ensure the program does not parse a 0 value so use ifs
       //Pump A
        if (jComboBox3.getSelectedIndex()==0){
            pumpStrokeA = 0;
        }
        else {
             pumpStrokeA = objPpmCalc.getStrokeInjectionRates(Integer.parseInt((String)jComboBox3.getSelectedItem()),userStrokeSettingsToBeUsed);
             //this variable is used to count howmany running pumps for the multiplication used
             //in the final ans. The drop down is not used here because it is in option 1
                if (pumpStrokeA == 0){
                option2RunningPumps = 0;
                }
                else if (pumpStrokeA != 0){
                    option2RunningPumps = 1;
                }
            }
        
        //Pump B
        if (jComboBox4.getSelectedIndex()==0){
            pumpStrokeB = 0;
        }
        else {
                pumpStrokeB = objPpmCalc.getStrokeInjectionRates(Integer.parseInt((String)jComboBox4.getSelectedItem()),userStrokeSettingsToBeUsed);
                
                if (pumpStrokeB == 0){
                option2RunningPumps = option2RunningPumps;
                }
                else if (pumpStrokeB != 0){
                option2RunningPumps = option2RunningPumps +1;

                }
            }
        
        //Pump C
        if (jComboBox5.getSelectedIndex()==0){
            pumpStrokeC = 0;
        }
        else {
                pumpStrokeC = objPpmCalc.getStrokeInjectionRates(Integer.parseInt((String)jComboBox5.getSelectedItem()),userStrokeSettingsToBeUsed);
                
                if (pumpStrokeC == 0){
                option2RunningPumps = option2RunningPumps;
                }
                else if (pumpStrokeC != 0){
                option2RunningPumps = option2RunningPumps +1;

                }
             }
         //Pump D
        if (jComboBox6.getSelectedIndex()==0){
            pumpStrokeD = 0;
        }
        else {
                pumpStrokeD = objPpmCalc.getStrokeInjectionRates(Integer.parseInt((String)jComboBox6.getSelectedItem()),userStrokeSettingsToBeUsed);
                if (pumpStrokeD == 0){
                option2RunningPumps = option2RunningPumps;
                }
                else if (pumpStrokeD != 0){
                option2RunningPumps = option2RunningPumps +1;

                }
            }
        
        //Pump E
        if (jComboBox7.getSelectedIndex()==0){
            pumpStrokeE = 0;
        }
        else {
                pumpStrokeE = objPpmCalc.getStrokeInjectionRates(Integer.parseInt((String)jComboBox7.getSelectedItem()),userStrokeSettingsToBeUsed);
                if (pumpStrokeE == 0){
                option2RunningPumps = option2RunningPumps;
                }
                else if (pumpStrokeE != 0){
                option2RunningPumps = option2RunningPumps +1;
                }
            }       
        
        generatedFlocPumpRate = pumpStrokeA+ pumpStrokeB+pumpStrokeC+pumpStrokeD+pumpStrokeE;
            
        return generatedFlocPumpRate;
        }//end of the method that generates flowrate
    
    //this is a method to refactor, it is calling a process it does not really need
    //it is doing this because of the counter option2RunningPumps that was added to
    //this method initially not knowing this will also be required. So change this
    //when you have the time
   
    public double getNoOfPumps(){
    generateFlocPumpRateFromCombo();
    //option2RunningPumps should have been initialized by now
    //it worked 
    return option2RunningPumps;
    }
    
    //get methods for all the inputs the user entered
    public double getUserMlForCali(){
        return mlForCali;
    }
    
    public double getUserNumberOfPumpsRunning(){
        return noFlocPumpsRunning;
    }
    
    
    public double getUserInjectionRate(){
        return flocPumpRate;
    }
    
    public double getUserTankInletFlowrate(){
        return surgeTankInletFlowrate;
    }
    
    
    public double getConvertedLitersPerDay(){
    return flowForAllRunningPumpsLpD;
    }
    
    public double getChemicalPpm(){
        return chemicalPpm;
    }
    
    //This just shows the time in days required to refil 
    public void planRefil(){
    if(jTextField3.getText().isEmpty()){//if the ppm textfield is empty
    javax.swing.JOptionPane.showMessageDialog(null, "You need to calculate Ppm before refil time can be estimated");
    }
    else{
        String currentFlocTankLevel="";//just initialize am first but it will be overwritten
        try{
            
            double dblCurrentFlocTankLevel = Double.parseDouble( currentFlocTankLevel = javax.swing.JOptionPane.showInputDialog(null, "Enter the current level in the Floc. tank:"));
                if ((dblCurrentFlocTankLevel >= 0)&(dblCurrentFlocTankLevel <= 100)){
                javax.swing.JOptionPane.showMessageDialog(null, "The remaining days to refil the Floc. tank is: "+getRefilTimeForRpt(currentFlocTankLevel)+" Day(s). \nThis is based on current injection rate of "+getConvertedLitersPerDayForRpt()+
                        " Liters/Day.\n\n(How to compute manually:\nTank Tot. Vol. is 2000 liters.\nCurrent Injection Rate is "+getConvertedLitersPerDayForRpt()+" liters/day"+
                            "\nPercentage of Daily Reduction (if this rate is constant) = Current Injection Rate / Tot. Tank Vol.\nDays to refill is Current Tank Level (in %) / Percentage of Daily Reduction.)");
                }
                else{
                javax.swing.JOptionPane.showMessageDialog(null, "Your input is invalid! Please enter only numbers between 0 - 100");
                }
            }
            catch(Exception e){
                javax.swing.JOptionPane.showMessageDialog(null, "Your input is invalid! Please enter only numbers, NO alphabets. The numbers should be between 0 - 100");
            }
        }
    }
    

    //--------------GETTERS FOR REPORT-----------------------------
    

    public String getUserNameForRpt(){
    String userName= jTextField7.getText();
        return userName;
    }
    public String getFlocTankPercentForRpt(){
    String flocTankPercent= jTextField8.getText();
        return flocTankPercent;
    }

    public String getFlocPumpsRunningForRpt(){
        
        String flocPumpsRunningForReport = "Not Obtained";
        if (jCheckBox2.isSelected()==true){
        flocPumpsRunningForReport = Double.toString(getNoOfPumps());
        }
        else if (jCheckBox2.isSelected()==false){
        flocPumpsRunningForReport = Double.toString(getUserNumberOfPumpsRunning());
        }
        else{
        javax.swing.JOptionPane.showMessageDialog(null, "Running pumps was not obtained");
        }
        
    return flocPumpsRunningForReport;
    }
    
    public String getPumpsServicedForRpt(){
    String pumpsServiced= jTextField9.getText();
        return pumpsServiced;
    }
    public String getNoAvailPumpsForRpt(){
    String noAvailPumps= jComboBox8.getSelectedItem().toString();
        return noAvailPumps;
    }

    public String getFlocPumpLubeLevForRpt(){
    String flocPumpLubeLev= jComboBox12.getSelectedItem().toString();
        return flocPumpLubeLev;
    }
    
    public String getConvertedLitersPerDayForRpt(){
    String convertedLitersPerDay = Double.toString(getConvertedLitersPerDay());
        return convertedLitersPerDay;
    }
    
    
    public String getUserTankInletFlowrateForRpt(){
        String surgeTankInletFlowrate = Double.toString(getUserTankInletFlowrate());
        return surgeTankInletFlowrate;
    }
    
    public String getChemicalPpmForRpt(){
    String chemicalPpmForRpt = Double.toString(getChemicalPpm());
        return chemicalPpmForRpt;
    }
    
    public String getUserDeptForRpt(){
    String userDept = jTextField10.getText();
        return userDept;
    }
    
    public String getUserShiftForRpt(){
        String userShift = jComboBox10.getSelectedItem().toString();
        return userShift;
    }
    public String getLevelIn24hrsForRpt(){
        //vol of Floc tank is 2m^3 = 2000liters i.e. flocTankTotVol = 2000
        double percThatWillDropInTank = getConvertedLitersPerDay()/flocTankTotVol;
        percThatWillDropInTank = Math.round(percThatWillDropInTank*100);//converted to percentage
        double levelIn24hrs = Double.parseDouble(getFlocTankPercentForRpt()) - percThatWillDropInTank;//subtract what the field agent saw and what will be removed in the next 24hrs
        
        //Now this will show what will be expected in the next 24hrs
        String strLevelIn24hrs = Double.toString(levelIn24hrs);//now convert it to string
        
        return strLevelIn24hrs;
    }
    
    //just divide level in 24hrs by 2
    public String getLevelIn12hrsForRpt(){
       double in12hrs = (Double.parseDouble(getFlocTankPercentForRpt()) -  Double.parseDouble(getLevelIn24hrsForRpt()))/2;
       in12hrs = in12hrs + Double.parseDouble(getLevelIn24hrsForRpt());
       String strLevelIn12hrs = Double.toString(in12hrs);
               return strLevelIn12hrs;
    }
    
    public String getRefilTimeForRpt(String currentFlocTankPercent){
        //Refil time is when the level is set to about 10% but confirm from the static variable above - levelBeforeRefil
        double levelToUseUpBeforeRefil = Double.parseDouble(currentFlocTankPercent) - levelBeforeRefil;
        
        //the percentage of the tank that is being consumed with the current rate is
        //vol used/vol of filled tank (*100) to send to percentage
        double percOfEntireTankUsed = (getConvertedLitersPerDay()/flocTankTotVol)*100;
        
        //divide the level to be used up by percentage of the tank your current rate consumes
        double refilTimeInDays = levelToUseUpBeforeRefil/percOfEntireTankUsed;
        
        //round it up
        refilTimeInDays = Math.round(refilTimeInDays);
        
        //convert it to string now
        String strRefilTimeInDays = Double.toString(refilTimeInDays);
        
        return strRefilTimeInDays;
    }
    
    //This method is simply when it will get to zero!
    public String getExhaustTimeForRpt(){
    
        //Refil time is when the level is set to about 10% but confirm from the static variable above - levelBeforeRefil
        double levelToUseUpBeforEmpty = Double.parseDouble(getFlocTankPercentForRpt());
        
        //the percentage of the tank that is being consumed with the current rate is
        //vol used/vol of filled tank (*100) to send to percentage
         double percOfEntireTankUsed = (getConvertedLitersPerDay()/flocTankTotVol)*100;
        
        //divide the level to be used up by percentage of the tank your current rate consumes
        double daysBeforeEmpty = levelToUseUpBeforEmpty/percOfEntireTankUsed;
        
        //round it up
        daysBeforeEmpty = Math.round(daysBeforeEmpty);
        
        //convert it to string now
        String strDaysBeforeEmpty = Double.toString(daysBeforeEmpty);
        
        return strDaysBeforeEmpty;   
    
    }
    
    public String getNoOfCloggedPumpsForRpt(){
        
    //I just subtracted the no of good pumps the user said from the total no of pumps
    int noOfCloggedPumps = 5 - Integer.parseInt(getNoAvailPumpsForRpt());
    String strNoOfCloggedPumps = Integer.toString(noOfCloggedPumps);
    
    return strNoOfCloggedPumps;
    }
    
    
    public String getTimeMetCloggedPumpsForRpt(){
    
    String metCloggedPumps = jComboBox13.getSelectedItem().toString();
    return metCloggedPumps;
    
    }
    
    public String getPumpsMetCloggedForRpt(){
    
    String pumpsMetClogged = jTextField11.getText();
    return pumpsMetClogged;
    }
    
    public String getPumpsThatNeedOilForRpt(){
    String pumpsThatNeedOil = jTextField12.getText();
    return pumpsThatNeedOil;
    
    }
    
    
    public String getGeneralNoteForRpt(){
     //not yet implemented, just finish the cores first
        String generalNote = "No Notes";
        return generalNote;
    }
    
    
    
    
    //--------------ATTEMPTING CODES FOR THE JPROGRESS BAR-------------
    
    
}


